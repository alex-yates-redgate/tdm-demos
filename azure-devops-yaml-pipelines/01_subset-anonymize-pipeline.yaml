name: redgate-anonymize-example
 
schedules:
- cron: 0 2 * * * # cron syntax for 2am daily
  branches:
    include: 
    - main
  displayName: 2am daily # friendly name given to a specific schedule

trigger: none

parameters:
- name: serverinstance
  default: "WIN2016"
- name: databaseName
  default: "Northwind"
- name: backupDir
  default: 'C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\Backup'

stages:
  - stage: SetUp  
    displayName: Set up staging databases
    jobs:
    - job: ${{parameters.databaseName}}
      displayName: Create staging databases
      steps:
      - powershell: |
          $backupDir = "${{parameters.backupDir}}"
          $databaseName = "${{parameters.databaseName}}"
          $mostRecentBackup = (Get-ChildItem -Path $backupDir | Where-Object {($_.Name -like "*$databaseName*") -and ($_.Name -notlike "*${databaseName}_Subset*")} | Sort-Object -Descending -Property LastWriteTime)[0]
          $backupPath = "${backupDir}\$mostRecentBackup"
          Write-Output "Most recent backup for $databaseName is: $backupPath"

          import-module dbatools
          Restore-DbaDatabase -SqlInstance ${{parameters.serverinstance}} -Path "$backupPath" -DatabaseName "${{parameters.databaseName}}_FullRestore" -DestinationFileSuffix "_FullRestore"
        displayName: 'Restore backup'
      - powershell: |
          # Create a DBCC clone of the source DB
          $sourceDb = "${{parameters.databaseName}}_FullRestore"
          $targetDb = "${{parameters.databaseName}}_Subset"
          $sql = "DBCC CLONEDATABASE ( $sourceDb , $targetDb ); ALTER DATABASE $targetDb SET READ_WRITE WITH ROLLBACK IMMEDIATE;"

          import-module dbatools
          Invoke-DbaQuery -SqlInstance ${{parameters.serverinstance}} -Query $sql
        displayName: 'Create target for subset'
  - stage: Subset  
    displayName: Import subset of data
    dependsOn: SetUp
    condition: succeeded()
    jobs:
    - deployment: Subset
      displayName: run rgsubset.exe
      environment: 'Subset'
      strategy:
        runOnce:
          deploy:
            steps:
            - powershell: |
                # params in
                $serverinstance = "${{parameters.serverinstance}}"
                $sourceDb = "${{parameters.databaseName}}_FullRestore"
                $targetDb = "${{parameters.databaseName}}_Subset" 
                
                # params out
                $sourceConnectionString = """server=${serverinstance};database=${sourceDb};Integrated Security=yes;TrustServerCertificate=yes"""
                $targetConnectionString = """server=${serverinstance};database=${targetDb};Integrated Security=yes;TrustServerCertificate=yes"""
                $startingTable = "dbo.Orders"
                $filterClause = """OrderId < 10260"""

                # running rgsubset
                rgsubset --database-engine=sqlserver --source-connection-string=$sourceConnectionString --target-connection-string=$targetConnectionString --starting-table=$startingTable --filter-clause=$filterClause
              displayName: 'Run rgsubset'
  - stage: Anonymize
    displayName: Anonymize subset DB
    dependsOn: Subset
    condition: succeeded()
    jobs:
    - deployment: Anonymize
      displayName: run rganonymize.exe
      environment: 'Anonymize'
      strategy:
        runOnce:
          deploy:
            steps:
            - powershell: |
                $server = "${{ parameters.serverinstance }}"
                $database = "${{parameters.databaseName}}_Subset" 
                $message = "Running anonymize.exe on ${server}" + "." + "${database}"
                Write-Output "${message}"
                rganonymize mask --database-engine SqlServer --connection-string "Server=${server}; Database=${database}; Integrated Security=yes; TrustServerCertificate=yes" --masking-file config\masking.json
              displayName: Run rganonymize.exe
  - stage: CleanUp
    displayName: Clean up staging databases
    dependsOn: Anonymize
    condition: succeeded()
    jobs:
    - deployment: CleanUp
      displayName: Pause to review data
      environment: 'Clean up'
      strategy:
        runOnce:
          deploy:
            steps:
            - powershell: |
                $subsetDb = "${{parameters.databaseName}}_Subset"
                
                import-module dbatools
                Backup-DbaDatabase -SqlInstance ${{ parameters.serverinstance }} -Database $subsetDb
              displayName: 'Backup target'
            - powershell: |
                # Delete both staging databases
                $sourceDb = "${{parameters.databaseName}}_FullRestore"
                $subsetDb = "${{parameters.databaseName}}_Subset"
                $sql = "alter database $sourceDb set single_user with rollback immediate; DROP Database $sourceDb; alter database $subsetDb set single_user with rollback immediate; DROP Database $subsetDb;"
                import-module dbatools
                Invoke-DbaQuery -SqlInstance ${{parameters.serverinstance}} -Query $sql
              displayName: 'Clean up'